package usecase

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"

	firebase "firebase.google.com/go"
	"firebase.google.com/go/messaging"
	"google.golang.org/api/option"
)

func sendPushNotification(recipientTokens []string, notification []byte) error {
	ctx := context.Background()
	fireBaseAuthKey := "AIzaSyDadhQvQJsezb0Jj8LkaA6NPHvZ6b3guuY"

	decodedKey, err := base64.StdEncoding.DecodeString(fireBaseAuthKey)
	if err != nil {
		return err
	}
	opt := []option.ClientOption{option.WithCredentialsJSON(decodedKey)}

	app, err := firebase.NewApp(ctx, nil, opt...)
	if err != nil {
		log.Fatalf("error initializing app: %v\n", err)
		return err
	}
	client, err := app.Messaging(ctx)
	if err != nil {
		log.Fatalf("error getting Messaging client: %v\n", err)
		return err
	}

	body, err := json.Marshal(notification)
	if err != nil {
		return fmt.Errorf("failed to marshal notification: %v", err)
	}

	for _, recipientToken := range recipientTokens {
		message := &messaging.Message{
			Token: recipientToken,
			Notification: &messaging.Notification{
				Title: "Notification Title",
				Body:  string(body),
			},
		}

		_, err = client.Send(ctx, message)
		if err != nil {
			log.Printf("error sending message to %s: %v\n", recipientToken, err)
			continue
		}

		fmt.Printf("Push notification sent successfully to %s\n", recipientToken)
	}

	return nil
}
