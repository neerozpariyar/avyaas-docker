// package usecase

// import (
// 	"avyaas/internal/domain/models"
// 	"avyaas/internal/domain/presenter"
// 	"encoding/json"
// 	"fmt"
// 	"log"
// 	"os"
// 	"os/signal"
// 	"syscall"

// 	"github.com/streadway/amqp"
// )

// func (uCase *usecase) Consume() presenter.ConsumerResponse {
// 	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
// 	if err != nil {
// 		log.Fatalf("failed to connect to RabbitMQ: %v", err)
// 	}
// 	defer conn.Close()

// 	ch, err := conn.Channel()
// 	if err != nil {
// 		log.Fatalf("failed to open a channel: %v", err)
// 	}
// 	defer ch.Close()

// 	// Declare the queues for the consumers
// 	queues := map[string]string{
// 		"verified":   "verified-users-queue",
// 		"unverified": "unverified-users-queue",
// 		"course":     "course-users-queue",
// 	}

// 	for recipient, queueName := range queues {
// 		q, err := ch.QueueDeclare(
// 			queueName, // name
// 			true,      // durable
// 			false,     // delete when unused
// 			false,     // exclusive
// 			false,     // no-wait
// 			nil,       // arguments
// 		)
// 		if err != nil {
// 			log.Fatalf("failed to declare queue %s: %v", queueName, err)
// 		}

// 		// Consume messages from the queue
// 		msgs, err := ch.Consume(
// 			q.Name, // queue
// 			"",     // consumer
// 			true,   // auto-ack
// 			false,  // exclusive
// 			false,  // no-local
// 			false,  // no-wait
// 			nil,    // args
// 		)
// 		if err != nil {
// 			log.Fatalf("failed to register a consumer for queue %s: %v", queueName, err)
// 		}

// 		// Handle messages in a separate goroutine
// 		go func(recipient string, msgs <-chan amqp.Delivery) {
// 			for msg := range msgs {
// 				notification := models.Notification{}
// 				err := json.Unmarshal(msg.Body, &notification)
// 				if err != nil {
// 					log.Printf("failed to unmarshal message for recipient %s: %v", recipient, err)
// 					continue
// 				}
// 				// Prepare the response
// 				response := presenter.ConsumerResponse{
// 					Recipient: recipient,
// 					Data:      []models.Notification{notification},
// 				}
// 				data, err := json.MarshalIndent(response, "", "    ")
// 				if err != nil {
// 					log.Printf("failed to marshal response to JSON: %v", err)
// 				} else {
// 					fmt.Println(string(data))
// 				}
// 			}
// 		}(recipient, msgs)
// 	}

// 	// Wait for termination signal
// 	sig := make(chan os.Signal, 1)
// 	signal.Notify(sig, syscall.SIGINT, syscall.SIGTERM)
// 	<-sig

// 	log.Println("Consumer terminated")
// 	return presenter.ConsumerResponse{}
// }
